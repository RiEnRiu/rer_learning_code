
import numpy as np
import math

#two degree surface fitting algorithm in space
def ellipsoid_fitting(points):
    num_points = points.shape[0]
    x = points[:,0]
    y = points[:,1]
    z = points[:,2]

    #means of primary term
    x_avr = x.sum()/num_points
    y_avr = y.sum()/num_points
    z_avr = z.sum()/num_points
    #means of two order term
    xx_avr = (x*x).sum()/num_points
    yy_avr = (y*y).sum()/num_points
    zz_avr = (z*z).sum()/num_points
    xy_avr = (x*y).sum()/num_points
    xz_avr = (x*z).sum()/num_points
    yz_avr = (y*z).sum()/num_points
    #means of three order coefficient
    xxx_avr = (x*x*x).sum()/num_points
    xxy_avr = (x*x*y).sum()/num_points
    xxz_avr = (x*x*z).sum()/num_points
    xyy_avr = (x*y*y).sum()/num_points
    xzz_avr = (x*z*z).sum()/num_points
    yyy_avr = (y*y*y).sum()/num_points
    yyz_avr = (y*y*z).sum()/num_points
    yzz_avr = (y*z*z).sum()/num_points
    zzz_avr = (z*z*z).sum()/num_points
    #means of four order coefficien
    yyyy_avr = (y*y*y*y).sum()/num_points
    zzzz_avr = (z*z*z*z).sum()/num_points
    xxyy_avr = (x*x*y*y).sum()/num_points
    xxzz_avr = (x*x*z*z).sum()/num_points
    yyzz_avr = (y*y*z*z).sum()/num_points
 
    #A0 coefs of linear functions
    A0 = np.mat([[yyyy_avr,yyzz_avr,xyy_avr,yyy_avr,yyz_avr,yy_avr],\
                 [yyzz_avr,zzzz_avr,xzz_avr,yzz_avr,zzz_avr,zz_avr],\
                 [xyy_avr,xzz_avr,xx_avr,xy_avr,xz_avr,x_avr],\
                 [yyy_avr,yzz_avr,xy_avr,yy_avr,yz_avr,y_avr],\
                 [yyz_avr,zzz_avr,xz_avr,yz_avr,zz_avr,z_avr],\
                 [yy_avr,zz_avr,x_avr,y_avr,z_avr,1]])

    #b coefs of linear functions
    b = np.mat([[-xxyy_avr],
                [-xxzz_avr],
                [-xxx_avr],
                [-xxy_avr],
                [-xxz_avr],
                [-xx_avr]])
 
    resoult = np.array((A0.I * b))[:,0]
    #resoult = solution_equations_n_yuan(A0,b);
 
    #centre point
    x00 = -resoult[2]/2              
    y00 = -resoult[3]/(2*resoult[0])    
    z00 = -resoult[4]/(2*resoult[1])
 
    #axial radius
    AA = math.sqrt(x00*x00 + resoult[0]*y00*y00 + resoult[1]*z00*z00 - resoult[5])
    BB = AA/math.sqrt(resoult[0])                                                   
    CC = AA/math.sqrt(resoult[1])  

    return ((x00,y00,z00),(AA,BB,CC))


if __name__=='__main__':
    points = [\
              [0.573687  ,1.66217   ,2.60986   ],\
              [0.946089  ,2.45101   ,-0.548523 ],\
              [1.52583   ,1.25327   ,-1.62273  ],\
              [1.91181   ,-0.763457 ,-0.318807 ],\
              [1.86206   ,0.05299   ,-1.27309  ],\
              [0.764291  ,1.95727   ,2.10341   ],\
              [1.1134    ,-2.18467  ,-1.04977  ],\
              [1.15064   ,0.715148  ,-2.61119  ],\
              [1.22563   ,1.80984   ,-1.59539  ],\
              [0.676671  ,2.47709   ,1.17361   ],\
              [0.253436  ,-0.145599 ,3.42995   ],\
              [1.77872   ,-0.400566 ,-1.52789  ],\
              [1.80536   ,-1.10721  ,0.655531  ],\
              [0.894569  ,2.42252   ,0.879079  ],\
              [1.44143   ,-1.4282   ,-1.67059  ],\
              [1.02254   ,-1.08473  ,-2.6806   ],\
              [1.11411   ,-1.77069  ,-1.87625  ],\
              [1.02449   ,1.5983    ,2.2336    ],\
              [1.24663   ,-2.20306  ,0.677789  ],\
              [1.66369   ,-1.47201  ,-0.665822 ],\
              [0.902497  ,2.12352   ,-1.77355  ],\
              [1.78398   ,0.000948  ,1.43813   ],\
              [1.91737   ,-0.420547 ,0.802476  ],\
              [1.60228   ,1.66451   ,0.59044   ],\
              [1.74541   ,0.922625  ,1.24897   ],\
              [1.21835   ,-0.993744 ,-2.47691  ],\
              [0.665836  ,2.01333   ,-2.1414   ],\
              [1.01021   ,-0.842834 ,-2.85446  ],\
              [0.348577  ,-0.801068 ,-3.25948  ],\
              [1.11915   ,-0.050208 ,2.87438   ],\
              [1.32903   ,0.766849  ,-2.40247  ],\
              [1.73402   ,1.40518   ,0.361557  ],\
              [1.97992   ,0.312151  ,0.133869  ],\
              [1.91237   ,0.077517  ,-1.05937  ],\
              [1.81968   ,-0.789378 ,-1.09864  ],\
              [1.95988   ,-0.392134 ,0.421991  ],\
              [1.76391   ,-0.252359 ,1.57448   ],\
              [1.13699   ,-1.67024  ,-1.98677  ],\
              [1.21557   ,0.781905  ,-2.58739  ],\
              [1.49194   ,-1.21701  ,-1.75983  ],\
              [0.724857  ,1.26904   ,-2.82742  ],\
              [0.50765   ,-1.39753  ,2.93761   ],\
              [0.784047  ,-0.706492 ,-3.06397  ],\
              [0.795471  ,1.48511   ,2.64469   ],\
              [1.97159   ,0.447608  ,-0.372911 ],\
              [1.8567    ,-0.17256  ,-1.28026  ],\
              [1.67395   ,-1.22975  ,-1.18201  ],\
              [1.59016   ,-0.898064 ,1.77326   ],\
              [1.08185   ,0.745627  ,-2.75305  ],\
              [0.369706  ,1.47752   ,-2.88426  ],\
              [1.69195   ,-1.51014  ,-0.243733 ],\
              [0.331549  ,-1.01605  ,-3.17866  ],\
              [1.44754   ,-1.33485  ,1.83789   ],\
              [1.68775   ,-0.527276 ,-1.76665  ],\
              [1.61357   ,-1.05941  ,1.58186   ],\
              [1.80946   ,0.858664  ,-0.996095 ],\
              [0.277339  ,1.54112   ,-2.86746  ],\
              [0.921119  ,2.49275   ,0.370463  ],\
              [0.523547  ,-1.48212  ,2.80687   ],\
              [0.597285  ,2.5866    ,0.96195   ],\
              [1.68908   ,-0.606605 ,1.67844   ],\
              [1.35943   ,-2.09311  ,-0.01064  ],\
              [1.07778   ,-2.38323  ,-0.259798 ],\
              [1.82749   ,0.403748  ,1.29375   ],\
              [0.783459  ,-1.60367  ,-2.40766  ],\
              [1.14208   ,-2.13828  ,1.19848   ],\
              [1.29079   ,-1.98182  ,-1.08827  ],\
              [0.429903  ,1.10685   ,-3.08935  ],\
              [1.80373   ,0.68395   ,1.34106   ],\
              [0.42442   ,-0.557039 ,-3.30703  ],\
              [1.89855   ,0.875599  ,-0.113552 ],\
              [1.21074   ,0.409547  ,-2.7098   ],\
              [0.763978  ,1.0858    ,2.96547   ],\
              [1.80963   ,0.749772  ,-1.0541   ],\
              [1.4489    ,-1.25404  ,-1.84734  ],\
              [1.73586   ,0.794795  ,-1.30551  ],\
              [0.662906  ,-2.66019  ,-0.070177 ],\
              [1.68053   ,-1.46435  ,0.567136  ],\
              [1.79856   ,-0.431031 ,1.41755   ],\
              [0.651466  ,2.43669   ,-1.34285  ],\
              [1.47765   ,-0.330011 ,-2.1184   ],\
              [1.77161   ,1.20076   ,0.578106  ],\
              [1.80347   ,1.09725   ,0.725349  ],\
              [1.83617   ,0.741754  ,-0.978672 ],\
              [0.845474  ,0.857278  ,2.95918   ],\
              [1.26357   ,-2.13945  ,-0.64693  ],\
              [0.080905  ,1.36672   ,2.97505   ],\
              [0.706662  ,-1.84751  ,2.33373   ],\
              [1.95027   ,0.581125  ,0.090815  ],\
              [1.74046   ,1.26288   ,-0.669643 ],\
              [1.74669   ,-0.46289  ,1.56686   ],\
              [1.36706   ,1.76885   ,1.2629    ],\
              [1.73407   ,1.37869   ,-0.447417 ],\
              [1.80532   ,-0.913189 ,0.775669  ],\
              [1.44614   ,-1.43264  ,1.60735   ],\
              [1.72135   ,0.011787  ,1.77225   ],\
              [0.578692  ,-1.55309  ,-2.72327  ],\
              [1.53831   ,1.87667   ,-0.623251 ],\
              [0.126671  ,0.007996  ,3.45436   ],\
              [1.76426   ,-0.592321 ,1.47205   ] \
             ]

    (centre,axial_radius) = ellipsoid_fitting(np.array(points))
    print(centre)
    print(axial_radius)
